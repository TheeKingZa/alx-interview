#!/usr/bin/python3
import sys


def queens(n, i=0, a=[], b=[], c=[]):
    """
    Generate possible solutions for the N-Queens problem.

    Parameters:
    - n: int, the number of queens to place on an n x n chessboard.
    - i: int, the current row being considered.
    - a: list, column indices where queens are placed.
    - b: list, sum of row and column indices for each queen.
    - c: list, difference of row and column indices for each queen.

    Yields:
    - list,
    a valid solution to the N-Queens problem
    represented as a list of column indices.

    The function uses backtracking to recursively generate
    valid solutions to the N-Queens problem.
    """
    if i < n:
        for j in range(n):
            # Check if the queen can be placed in column j
            # without conflicting with existing queens.
            if j not in a and i + j not in b and i - j not in c:
                # Recursively call the function for the next row.
                yield from queens(n, i + 1, a + [j], b + [i + j], c + [i - j])
    else:
        # If all queens are placed successfully, yield the solution.
        yield a


def solve(n):
    """
    Solve the N-Queens problem and print solutions.

    Parameters:
    - n: int, the number of queens to place on an n x n chessboard.

    This function iterates over all solutions generated
    by the queens function and prints them.
    """
    k = []  # List to store the positions of queens in each solution.
    i = 0   # Counter for row index.
    # Iterate over all solutions generated by the queens function.
    for solution in queens(n, 0):
        # Iterate over the column indices in the current solution.
        for s in solution:
            # Append the position of the queen
            # (row index, column index) to the list k.
            k.append([i, s])
            i += 1  # Increment the row index.
        # Print the positions of queens in the current solution.
        print(k)
        k = []  # Reset the list k for the next solution.
        i = 0   # Reset the row index for the next solution.


if __name__ == "__main__":
    # Check if the correct number of command-line arguments is provided.
    if len(sys.argv) != 2:
        print("Usage: nqueens N")
        sys.exit(1)

    # Check if the provided argument is a valid integer.
    if not sys.argv[1].isdigit():
        print("N must be a number")
        sys.exit(1)

    # Convert the argument to an integer.
    n = int(sys.argv[1])

    # Check if the number of queens is at least 4.
    if n < 4:
        print("N must be at least 4")
        sys.exit(1)

    # Call the solve function to find and
    # print solutions to the N-Queens problem.
    solve(n)
